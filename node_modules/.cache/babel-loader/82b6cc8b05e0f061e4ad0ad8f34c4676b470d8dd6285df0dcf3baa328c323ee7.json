{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\Intern\\\\src\\\\components\\\\DatabaseResetComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DatabaseResetComponent = ({\n  fetchDashboardData\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedResetType, setSelectedResetType] = useState('manual');\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [resetStatus, setResetStatus] = useState({\n    message: '',\n    type: ''\n  });\n  const [mealWindows, setMealWindows] = useState([]);\n  const [dynamicResetSchedule, setDynamicResetSchedule] = useState([]);\n\n  // Fetch meal windows and calculate reset schedule\n  useEffect(() => {\n    const fetchMealWindows = async () => {\n      try {\n        const response = await fetch('/api/settings', {\n          credentials: 'include'\n        });\n        const data = await response.json();\n        if (data.success && data.settings.mealWindows) {\n          setMealWindows(data.settings.mealWindows);\n          calculateResetSchedule(data.settings.mealWindows);\n        }\n      } catch (error) {\n        console.error('Error fetching meal windows:', error);\n        // Fallback to default schedule if API fails\n        setDynamicResetSchedule([{\n          time: '05:45',\n          meal: 'Before Late Night Meal'\n        }, {\n          time: '09:30',\n          meal: 'Before Breakfast'\n        }, {\n          time: '14:30',\n          meal: 'Before Lunch'\n        }, {\n          time: '20:30',\n          meal: 'Before Dinner'\n        }]);\n      }\n    };\n    fetchMealWindows();\n  }, []);\n\n  // Calculate reset times (30 minutes before each meal start)\n  const calculateResetSchedule = windows => {\n    const schedule = windows.filter(window => window.enabled).map(window => {\n      const [hours, minutes] = window.startTime.split(':').map(Number);\n      const startDate = new Date();\n      startDate.setHours(hours, minutes, 0, 0);\n\n      // Subtract 30 minutes\n      const resetDate = new Date(startDate.getTime() - 30 * 60000);\n      const resetTime = `${resetDate.getHours().toString().padStart(2, '0')}:${resetDate.getMinutes().toString().padStart(2, '0')}`;\n      return {\n        time: resetTime,\n        meal: `30 min before ${window.mealType.charAt(0).toUpperCase() + window.mealType.slice(1)}`\n      };\n    }).sort((a, b) => a.time.localeCompare(b.time));\n    setDynamicResetSchedule(schedule);\n  };\n\n  // Show reset status message\n  const showResetStatus = (message, type) => {\n    setResetStatus({\n      message,\n      type\n    });\n\n    // Auto-remove success/error messages after 5 seconds\n    if (type !== 'info') {\n      setTimeout(() => {\n        setResetStatus({\n          message: '',\n          type: ''\n        });\n      }, 5000);\n    }\n  };\n\n  // Perform manual reset\n  const performManualReset = async () => {\n    if (isLoading) return;\n    try {\n      setIsLoading(true);\n      setShowConfirmation(false);\n      showResetStatus('Resetting meal database...', 'info');\n      const response = await fetch('/api/dashboard/reset-meals', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      const data = await response.json();\n      if (data.success) {\n        showResetStatus(`✅ ${data.message} Reset completed at ${data.resetTime}`, 'success');\n\n        // Refresh dashboard stats if available\n        if (fetchDashboardData) {\n          setTimeout(() => {\n            fetchDashboardData();\n          }, 1000);\n        }\n      } else {\n        showResetStatus(`❌ Reset failed: ${data.error}`, 'error');\n      }\n    } catch (error) {\n      console.error('Reset error:', error);\n      showResetStatus('❌ Network error. Please check if the backend server is running.', 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Perform test reset\n  const performTestReset = async () => {\n    if (isLoading) return;\n    try {\n      setIsLoading(true);\n      showResetStatus('Running test reset...', 'info');\n\n      // Simulate test reset - in real implementation, this would call a test endpoint\n      setTimeout(() => {\n        showResetStatus('✅ Test reset completed successfully. No actual data was modified.', 'success');\n        setIsLoading(false);\n      }, 2000);\n    } catch (error) {\n      console.error('Test reset error:', error);\n      showResetStatus('❌ Test reset failed.', 'error');\n      setIsLoading(false);\n    }\n  };\n\n  // Get next scheduled reset time\n  const getNextResetTime = () => {\n    if (dynamicResetSchedule.length === 0) return 'Loading...';\n    const now = new Date();\n    const currentTime = now.toLocaleTimeString('en-US', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'Africa/Addis_Ababa'\n    });\n    const resetTimes = dynamicResetSchedule.map(item => item.time).sort();\n    for (const time of resetTimes) {\n      if (time > currentTime) {\n        return time;\n      }\n    }\n\n    // If no reset time today, return first reset time tomorrow\n    return resetTimes[0] + ' (tomorrow)';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"database-reset-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-database\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), \"Database Reset Management\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-exclamation-triangle warning-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Database Reset System:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), \" This system automatically clears meal attendance records 30 minutes before each meal window starts, allowing students to use their meals again for the next period. You can also perform manual resets when needed.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-options-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `reset-option-card ${selectedResetType === 'automatic' ? 'selected' : ''}`,\n        onClick: () => setSelectedResetType('automatic'),\n        \"data-reset-type\": \"automatic\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-option-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-clock\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Automatic Reset Schedule\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-option-description\",\n          children: \"Database automatically resets after each meal window closes based on your meal window configuration.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-timing\",\n          children: \"Active - Next reset varies by meal schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `reset-option-card ${selectedResetType === 'manual' ? 'selected' : ''}`,\n        onClick: () => setSelectedResetType('manual'),\n        \"data-reset-type\": \"manual\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-option-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-hand-paper\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Manual Reset Control\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-option-description\",\n          children: \"Perform immediate database reset when needed for maintenance or emergency situations.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-timing\",\n          children: \"Available anytime - Admin controlled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-calendar-alt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), \"Automatic Reset Schedule (EAT)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"schedule-list\",\n        children: dynamicResetSchedule.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"schedule-time\",\n            children: [item.time, \" EAT\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"schedule-meal\",\n            children: item.meal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"manual-reset-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manual-reset-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-exclamation-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Manual Database Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manual-reset-warning\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Warning:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), \" Manual reset will immediately clear all current meal attendance records. Students will be able to use their meals again after the reset.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-btn danger manual-reset-btn\",\n          onClick: () => setShowConfirmation(true),\n          disabled: isLoading,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-trash-alt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), \"Reset Database Now\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-btn secondary test-reset-btn\",\n          onClick: performTestReset,\n          disabled: isLoading,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-vial\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), \"Test Reset\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), resetStatus.message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `reset-status ${resetStatus.type}`,\n        children: resetStatus.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), showConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-confirmation-modal\",\n      onClick: () => setShowConfirmation(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset-confirmation-content\",\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-confirmation-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-exclamation-triangle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Confirm Database Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-confirmation-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Warning:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 18\n            }, this), \" This action will permanently delete all current meal attendance records.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Students will be able to use their meals again after the reset.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This action cannot be undone. Are you sure you want to proceed?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-confirmation-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-btn secondary cancel-reset-btn\",\n            onClick: () => setShowConfirmation(false),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this), \"Cancel\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-btn danger confirm-reset-btn\",\n            onClick: performManualReset,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-trash-alt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }, this), \"Reset Database\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(DatabaseResetComponent, \"HTXH0M+/T8ZE6gAoiDs2TMjnRvw=\");\n_c = DatabaseResetComponent;\nexport default DatabaseResetComponent;\nvar _c;\n$RefreshReg$(_c, \"DatabaseResetComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DatabaseResetComponent","fetchDashboardData","_s","isLoading","setIsLoading","selectedResetType","setSelectedResetType","showConfirmation","setShowConfirmation","resetStatus","setResetStatus","message","type","mealWindows","setMealWindows","dynamicResetSchedule","setDynamicResetSchedule","fetchMealWindows","response","fetch","credentials","data","json","success","settings","calculateResetSchedule","error","console","time","meal","windows","schedule","filter","window","enabled","map","hours","minutes","startTime","split","Number","startDate","Date","setHours","resetDate","getTime","resetTime","getHours","toString","padStart","getMinutes","mealType","charAt","toUpperCase","slice","sort","a","b","localeCompare","showResetStatus","setTimeout","performManualReset","method","headers","performTestReset","getNextResetTime","length","now","currentTime","toLocaleTimeString","hour12","hour","minute","timeZone","resetTimes","item","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","disabled","e","stopPropagation","_c","$RefreshReg$"],"sources":["C:/Users/hp/OneDrive/Desktop/Intern/src/components/DatabaseResetComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst DatabaseResetComponent = ({ fetchDashboardData }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedResetType, setSelectedResetType] = useState('manual');\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [resetStatus, setResetStatus] = useState({ message: '', type: '' });\n\n  const [mealWindows, setMealWindows] = useState([]);\n  const [dynamicResetSchedule, setDynamicResetSchedule] = useState([]);\n\n  // Fetch meal windows and calculate reset schedule\n  useEffect(() => {\n    const fetchMealWindows = async () => {\n      try {\n        const response = await fetch('/api/settings', {\n          credentials: 'include'\n        });\n        const data = await response.json();\n        \n        if (data.success && data.settings.mealWindows) {\n          setMealWindows(data.settings.mealWindows);\n          calculateResetSchedule(data.settings.mealWindows);\n        }\n      } catch (error) {\n        console.error('Error fetching meal windows:', error);\n        // Fallback to default schedule if API fails\n        setDynamicResetSchedule([\n          { time: '05:45', meal: 'Before Late Night Meal' },\n          { time: '09:30', meal: 'Before Breakfast' },\n          { time: '14:30', meal: 'Before Lunch' },\n          { time: '20:30', meal: 'Before Dinner' }\n        ]);\n      }\n    };\n    \n    fetchMealWindows();\n  }, []);\n\n  // Calculate reset times (30 minutes before each meal start)\n  const calculateResetSchedule = (windows) => {\n    const schedule = windows\n      .filter(window => window.enabled)\n      .map(window => {\n        const [hours, minutes] = window.startTime.split(':').map(Number);\n        const startDate = new Date();\n        startDate.setHours(hours, minutes, 0, 0);\n        \n        // Subtract 30 minutes\n        const resetDate = new Date(startDate.getTime() - (30 * 60000));\n        const resetTime = `${resetDate.getHours().toString().padStart(2, '0')}:${resetDate.getMinutes().toString().padStart(2, '0')}`;\n        \n        return {\n          time: resetTime,\n          meal: `30 min before ${window.mealType.charAt(0).toUpperCase() + window.mealType.slice(1)}`\n        };\n      })\n      .sort((a, b) => a.time.localeCompare(b.time));\n    \n    setDynamicResetSchedule(schedule);\n  };\n\n  // Show reset status message\n  const showResetStatus = (message, type) => {\n    setResetStatus({ message, type });\n    \n    // Auto-remove success/error messages after 5 seconds\n    if (type !== 'info') {\n      setTimeout(() => {\n        setResetStatus({ message: '', type: '' });\n      }, 5000);\n    }\n  };\n\n  // Perform manual reset\n  const performManualReset = async () => {\n    if (isLoading) return;\n    \n    try {\n      setIsLoading(true);\n      setShowConfirmation(false);\n      showResetStatus('Resetting meal database...', 'info');\n      \n      const response = await fetch('/api/dashboard/reset-meals', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include'\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        showResetStatus(\n          `✅ ${data.message} Reset completed at ${data.resetTime}`, \n          'success'\n        );\n        \n        // Refresh dashboard stats if available\n        if (fetchDashboardData) {\n          setTimeout(() => {\n            fetchDashboardData();\n          }, 1000);\n        }\n      } else {\n        showResetStatus(`❌ Reset failed: ${data.error}`, 'error');\n      }\n    } catch (error) {\n      console.error('Reset error:', error);\n      showResetStatus('❌ Network error. Please check if the backend server is running.', 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Perform test reset\n  const performTestReset = async () => {\n    if (isLoading) return;\n    \n    try {\n      setIsLoading(true);\n      showResetStatus('Running test reset...', 'info');\n      \n      // Simulate test reset - in real implementation, this would call a test endpoint\n      setTimeout(() => {\n        showResetStatus('✅ Test reset completed successfully. No actual data was modified.', 'success');\n        setIsLoading(false);\n      }, 2000);\n      \n    } catch (error) {\n      console.error('Test reset error:', error);\n      showResetStatus('❌ Test reset failed.', 'error');\n      setIsLoading(false);\n    }\n  };\n\n  // Get next scheduled reset time\n  const getNextResetTime = () => {\n    if (dynamicResetSchedule.length === 0) return 'Loading...';\n    \n    const now = new Date();\n    const currentTime = now.toLocaleTimeString('en-US', { \n      hour12: false, \n      hour: '2-digit', \n      minute: '2-digit',\n      timeZone: 'Africa/Addis_Ababa'\n    });\n\n    const resetTimes = dynamicResetSchedule.map(item => item.time).sort();\n    \n    for (const time of resetTimes) {\n      if (time > currentTime) {\n        return time;\n      }\n    }\n    \n    // If no reset time today, return first reset time tomorrow\n    return resetTimes[0] + ' (tomorrow)';\n  };\n\n  return (\n    <div className=\"database-reset-section\">\n      <h2>\n        <i className=\"fas fa-database\"></i>\n        Database Reset Management\n      </h2>\n\n      <div className=\"reset-description\">\n        <i className=\"fas fa-exclamation-triangle warning-icon\"></i>\n        <strong>Database Reset System:</strong> This system automatically clears meal attendance records 30 minutes before each meal window starts, allowing \n        students to use their meals again for the next period. You can also perform manual resets when needed.\n      </div>\n\n      <div className=\"reset-options-grid\">\n        <div \n          className={`reset-option-card ${selectedResetType === 'automatic' ? 'selected' : ''}`}\n          onClick={() => setSelectedResetType('automatic')}\n          data-reset-type=\"automatic\"\n        >\n          <div className=\"reset-option-header\">\n            <i className=\"fas fa-clock\"></i>\n            <h3>Automatic Reset Schedule</h3>\n          </div>\n          <div className=\"reset-option-description\">\n            Database automatically resets after each meal window closes based on your meal window configuration.\n          </div>\n          <div className=\"reset-timing\">\n            Active - Next reset varies by meal schedule\n          </div>\n        </div>\n\n        <div \n          className={`reset-option-card ${selectedResetType === 'manual' ? 'selected' : ''}`}\n          onClick={() => setSelectedResetType('manual')}\n          data-reset-type=\"manual\"\n        >\n          <div className=\"reset-option-header\">\n            <i className=\"fas fa-hand-paper\"></i>\n            <h3>Manual Reset Control</h3>\n          </div>\n          <div className=\"reset-option-description\">\n            Perform immediate database reset when needed for maintenance or emergency situations.\n          </div>\n          <div className=\"reset-timing\">\n            Available anytime - Admin controlled\n          </div>\n        </div>\n      </div>\n\n      <div className=\"schedule-display\">\n        <h4>\n          <i className=\"fas fa-calendar-alt\"></i>\n          Automatic Reset Schedule (EAT)\n        </h4>\n        <ul className=\"schedule-list\">\n          {dynamicResetSchedule.map((item, index) => (\n            <li key={index}>\n              <span className=\"schedule-time\">{item.time} EAT</span>\n              <span className=\"schedule-meal\">{item.meal}</span>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"manual-reset-section\">\n        <div className=\"manual-reset-header\">\n          <i className=\"fas fa-exclamation-circle\"></i>\n          <h3>Manual Database Reset</h3>\n        </div>\n\n        <div className=\"manual-reset-warning\">\n          <strong>Warning:</strong> Manual reset will immediately clear all current meal attendance records. \n          Students will be able to use their meals again after the reset.\n        </div>\n\n        <div className=\"reset-controls\">\n          <button \n            className=\"reset-btn danger manual-reset-btn\"\n            onClick={() => setShowConfirmation(true)}\n            disabled={isLoading}\n          >\n            <i className=\"fas fa-trash-alt\"></i>\n            Reset Database Now\n          </button>\n\n          <button \n            className=\"reset-btn secondary test-reset-btn\"\n            onClick={performTestReset}\n            disabled={isLoading}\n          >\n            <i className=\"fas fa-vial\"></i>\n            Test Reset\n          </button>\n        </div>\n\n        {resetStatus.message && (\n          <div className={`reset-status ${resetStatus.type}`}>\n            {resetStatus.message}\n          </div>\n        )}\n      </div>\n\n      {/* Confirmation Modal */}\n      {showConfirmation && (\n        <div className=\"reset-confirmation-modal\" onClick={() => setShowConfirmation(false)}>\n          <div className=\"reset-confirmation-content\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"reset-confirmation-header\">\n              <i className=\"fas fa-exclamation-triangle\"></i>\n              <h3>Confirm Database Reset</h3>\n            </div>\n            <div className=\"reset-confirmation-message\">\n              <p><strong>Warning:</strong> This action will permanently delete all current meal attendance records.</p>\n              <p>Students will be able to use their meals again after the reset.</p>\n              <p>This action cannot be undone. Are you sure you want to proceed?</p>\n            </div>\n            <div className=\"reset-confirmation-actions\">\n              <button \n                className=\"reset-btn secondary cancel-reset-btn\"\n                onClick={() => setShowConfirmation(false)}\n              >\n                <i className=\"fas fa-times\"></i>\n                Cancel\n              </button>\n              <button \n                className=\"reset-btn danger confirm-reset-btn\"\n                onClick={performManualReset}\n              >\n                <i className=\"fas fa-trash-alt\"></i>\n                Reset Database\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DatabaseResetComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}