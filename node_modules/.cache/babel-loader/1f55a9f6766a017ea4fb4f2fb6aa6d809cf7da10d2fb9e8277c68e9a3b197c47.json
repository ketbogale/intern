{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useDashboardData = () => {\n  _s();\n  const [stats, setStats] = useState({\n    totalStudents: 0,\n    todayAttendance: 0,\n    weeklyAttendance: 0,\n    attendancePercentage: 0\n  });\n  const [attendanceData, setAttendanceData] = useState([]);\n  const [lowAttendanceAlert, setLowAttendanceAlert] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [refreshMessage, setRefreshMessage] = useState('');\n  const [lastUpdated, setLastUpdated] = useState('');\n  const [analyticsData, setAnalyticsData] = useState(null);\n  const [analyticsLoading, setAnalyticsLoading] = useState(false);\n  const fetchDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setRefreshMessage('');\n      const response = await fetch('/api/dashboard/stats');\n      const data = await response.json();\n      if (response.ok && data.success) {\n        setStats({\n          totalStudents: data.stats.totalStudents || 0,\n          todayAttendance: data.stats.todayAttendance || 0,\n          weeklyAttendance: data.stats.weeklyAttendance || 0,\n          attendancePercentage: data.stats.attendancePercentage || 0\n        });\n        setLowAttendanceAlert(data.lowAttendanceAlert);\n        setAttendanceData(data.recentAttendance || []);\n        setIsLoading(false);\n\n        // Update last refreshed time\n        const now = new Date();\n        const timeString = now.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          hour12: true\n        });\n        setLastUpdated(timeString);\n        setRefreshMessage('Data has been refreshed successfully!');\n\n        // Clear success message after 3 seconds\n        setTimeout(() => {\n          setRefreshMessage('');\n        }, 3000);\n      } else {\n        setStats({\n          totalStudents: 0,\n          todayAttendance: 0,\n          weeklyAttendance: 0\n        });\n        setAttendanceData([]);\n        setIsLoading(false);\n        setRefreshMessage('Failed to refresh data. Please try again.');\n        setTimeout(() => {\n          setRefreshMessage('');\n        }, 3000);\n      }\n    } catch (error) {\n      setIsLoading(false);\n      setRefreshMessage('Failed to refresh data. Please try again.');\n    }\n  };\n\n  // Fetch analytics data\n  const fetchAnalyticsData = async () => {\n    try {\n      setAnalyticsLoading(true);\n      const response = await fetch('/api/dashboard/analytics');\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success) {\n          setAnalyticsData(data.analytics);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching analytics data:', error);\n    } finally {\n      setAnalyticsLoading(false);\n    }\n  };\n\n  // Handle export functionality\n  const handleExport = async () => {\n    try {\n      const response = await fetch('/api/dashboard/export');\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        const filename = `current_attendance_${new Date().toISOString().split('T')[0]}.csv`;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n        setRefreshMessage('CSV export completed successfully!');\n        setTimeout(() => setRefreshMessage(''), 3000);\n      } else {\n        setRefreshMessage('Failed to export CSV file.');\n        setTimeout(() => setRefreshMessage(''), 3000);\n      }\n    } catch (error) {\n      setRefreshMessage('Error exporting CSV file.');\n      setTimeout(() => setRefreshMessage(''), 3000);\n    }\n  };\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n  return {\n    stats,\n    attendanceData,\n    lowAttendanceAlert,\n    isLoading,\n    refreshMessage,\n    setRefreshMessage,\n    lastUpdated,\n    analyticsData,\n    analyticsLoading,\n    fetchDashboardData,\n    fetchAnalyticsData,\n    handleExport\n  };\n};\n_s(useDashboardData, \"LWgD8/9KS7XSqGea7T6DUWJBCBA=\");","map":{"version":3,"names":["useState","useEffect","useDashboardData","_s","stats","setStats","totalStudents","todayAttendance","weeklyAttendance","attendancePercentage","attendanceData","setAttendanceData","lowAttendanceAlert","setLowAttendanceAlert","isLoading","setIsLoading","refreshMessage","setRefreshMessage","lastUpdated","setLastUpdated","analyticsData","setAnalyticsData","analyticsLoading","setAnalyticsLoading","fetchDashboardData","response","fetch","data","json","ok","success","recentAttendance","now","Date","timeString","toLocaleTimeString","hour","minute","second","hour12","setTimeout","error","fetchAnalyticsData","analytics","console","handleExport","blob","url","window","URL","createObjectURL","a","document","createElement","href","filename","toISOString","split","download","body","appendChild","click","revokeObjectURL","removeChild"],"sources":["C:/Users/hp/OneDrive/Desktop/Intern/src/hooks/useDashboardData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useDashboardData = () => {\n  const [stats, setStats] = useState({\n    totalStudents: 0,\n    todayAttendance: 0,\n    weeklyAttendance: 0,\n    attendancePercentage: 0\n  });\n  const [attendanceData, setAttendanceData] = useState([]);\n  const [lowAttendanceAlert, setLowAttendanceAlert] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [refreshMessage, setRefreshMessage] = useState('');\n  const [lastUpdated, setLastUpdated] = useState('');\n  const [analyticsData, setAnalyticsData] = useState(null);\n  const [analyticsLoading, setAnalyticsLoading] = useState(false);\n\n  const fetchDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setRefreshMessage('');\n      \n      const response = await fetch('/api/dashboard/stats');\n      const data = await response.json();\n      \n      if (response.ok && data.success) {\n        setStats({\n          totalStudents: data.stats.totalStudents || 0,\n          todayAttendance: data.stats.todayAttendance || 0,\n          weeklyAttendance: data.stats.weeklyAttendance || 0,\n          attendancePercentage: data.stats.attendancePercentage || 0\n        });\n        setLowAttendanceAlert(data.lowAttendanceAlert);\n        setAttendanceData(data.recentAttendance || []);\n        setIsLoading(false);\n        \n        // Update last refreshed time\n        const now = new Date();\n        const timeString = now.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          hour12: true\n        });\n        setLastUpdated(timeString);\n        setRefreshMessage('Data has been refreshed successfully!');\n        \n        // Clear success message after 3 seconds\n        setTimeout(() => {\n          setRefreshMessage('');\n        }, 3000);\n      } else {\n        setStats({\n          totalStudents: 0,\n          todayAttendance: 0,\n          weeklyAttendance: 0\n        });\n        setAttendanceData([]);\n        setIsLoading(false);\n        setRefreshMessage('Failed to refresh data. Please try again.');\n        \n        setTimeout(() => {\n          setRefreshMessage('');\n        }, 3000);\n      }\n    } catch (error) {\n      setIsLoading(false);\n      setRefreshMessage('Failed to refresh data. Please try again.');\n    }\n  };\n\n  // Fetch analytics data\n  const fetchAnalyticsData = async () => {\n    try {\n      setAnalyticsLoading(true);\n      const response = await fetch('/api/dashboard/analytics');\n      \n      if (response.ok) {\n        const data = await response.json();\n        if (data.success) {\n          setAnalyticsData(data.analytics);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching analytics data:', error);\n    } finally {\n      setAnalyticsLoading(false);\n    }\n  };\n\n  // Handle export functionality\n  const handleExport = async () => {\n    try {\n      const response = await fetch('/api/dashboard/export');\n      \n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        \n        const filename = `current_attendance_${new Date().toISOString().split('T')[0]}.csv`;\n        \n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n        \n        setRefreshMessage('CSV export completed successfully!');\n        setTimeout(() => setRefreshMessage(''), 3000);\n      } else {\n        setRefreshMessage('Failed to export CSV file.');\n        setTimeout(() => setRefreshMessage(''), 3000);\n      }\n    } catch (error) {\n      setRefreshMessage('Error exporting CSV file.');\n      setTimeout(() => setRefreshMessage(''), 3000);\n    }\n  };\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n\n  return {\n    stats,\n    attendanceData,\n    lowAttendanceAlert,\n    isLoading,\n    refreshMessage,\n    setRefreshMessage,\n    lastUpdated,\n    analyticsData,\n    analyticsLoading,\n    fetchDashboardData,\n    fetchAnalyticsData,\n    handleExport\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}