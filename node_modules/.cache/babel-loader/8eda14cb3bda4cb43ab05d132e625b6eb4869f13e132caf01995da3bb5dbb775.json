{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\Intern\\\\src\\\\components\\\\DatabaseResetComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DatabaseResetComponent = ({\n  fetchDashboardData\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedResetType, setSelectedResetType] = useState('manual');\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [resetStatus, setResetStatus] = useState({\n    message: '',\n    type: ''\n  });\n  const [dynamicResetSchedule, setDynamicResetSchedule] = useState([]);\n  const [automaticResetEnabled, setAutomaticResetEnabled] = useState(true);\n\n  // Fetch meal windows and calculate reset schedule\n  useEffect(() => {\n    const fetchMealWindows = async () => {\n      try {\n        const response = await fetch('/api/meal-windows', {\n          credentials: 'include'\n        });\n        const data = await response.json();\n        if (data.success && data.mealWindows) {\n          calculateResetSchedule(data.mealWindows);\n        }\n      } catch (error) {\n        console.error('Error fetching meal windows:', error);\n        // Fallback to default schedule if API fails\n        setDynamicResetSchedule([{\n          time: '05:45',\n          meal: 'Late Night',\n          resetType: 'Before'\n        }, {\n          time: '09:30',\n          meal: 'Breakfast',\n          resetType: 'Before'\n        }, {\n          time: '14:30',\n          meal: 'Lunch',\n          resetType: 'Before'\n        }, {\n          time: '20:30',\n          meal: 'Dinner',\n          resetType: 'Before'\n        }]);\n      }\n    };\n    fetchMealWindows();\n  }, []);\n\n  // Calculate reset times (30 minutes before each meal start)\n  const calculateResetSchedule = mealWindowsObj => {\n    console.log('Calculating reset schedule from database:', mealWindowsObj);\n    const schedule = Object.entries(mealWindowsObj).filter(([mealType, window]) => window.enabled).map(([mealType, window]) => {\n      // Validate startTime format\n      if (!window.startTime || !window.startTime.match(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)) {\n        console.error(`Invalid startTime format for ${mealType}:`, window.startTime);\n        return null;\n      }\n      const [hours, minutes] = window.startTime.split(':').map(Number);\n      const startDate = new Date();\n      startDate.setHours(hours, minutes, 0, 0);\n\n      // Subtract 30 minutes for reset time\n      const resetDate = new Date(startDate.getTime() - 30 * 60000);\n\n      // Handle day rollover (if reset time goes to previous day)\n      let resetTime;\n      if (resetDate.getDate() !== startDate.getDate()) {\n        // Reset time is on previous day, show as 23:XX\n        resetTime = `${resetDate.getHours().toString().padStart(2, '0')}:${resetDate.getMinutes().toString().padStart(2, '0')}`;\n      } else {\n        resetTime = `${resetDate.getHours().toString().padStart(2, '0')}:${resetDate.getMinutes().toString().padStart(2, '0')}`;\n      }\n      console.log(`${mealType}: Start ${window.startTime} → Reset ${resetTime}`);\n\n      // Format meal type display name\n      let displayName = mealType;\n      if (mealType === 'lateNight') {\n        displayName = 'Late Night';\n      } else {\n        displayName = mealType.charAt(0).toUpperCase() + mealType.slice(1);\n      }\n      return {\n        time: resetTime,\n        meal: displayName,\n        resetType: 'Before',\n        startTime: window.startTime,\n        mealType: mealType\n      };\n    }).filter(item => item !== null) // Remove invalid entries\n    .sort((a, b) => a.time.localeCompare(b.time));\n    console.log('Final schedule for all meal types:', schedule);\n    setDynamicResetSchedule(schedule);\n  };\n\n  // Show reset status message\n  const showResetStatus = (message, type) => {\n    setResetStatus({\n      message,\n      type\n    });\n\n    // Auto-remove success/error messages after 5 seconds\n    if (type !== 'info') {\n      setTimeout(() => {\n        setResetStatus({\n          message: '',\n          type: ''\n        });\n      }, 5000);\n    }\n  };\n\n  // Perform manual reset\n  const performManualReset = async () => {\n    if (isLoading) return;\n    try {\n      setIsLoading(true);\n      setShowConfirmation(false);\n      showResetStatus('Resetting meal database...', 'info');\n      const response = await fetch('/api/dashboard/reset-meals', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      const data = await response.json();\n      if (data.success) {\n        showResetStatus(`✅ ${data.message} Reset completed at ${data.resetTime}`, 'success');\n\n        // Refresh dashboard stats if available\n        if (fetchDashboardData) {\n          setTimeout(() => {\n            fetchDashboardData();\n          }, 1000);\n        }\n      } else {\n        showResetStatus(`❌ Reset failed: ${data.error}`, 'error');\n      }\n    } catch (error) {\n      console.error('Reset error:', error);\n      showResetStatus('❌ Network error. Please check if the backend server is running.', 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Perform test reset\n  const performTestReset = async () => {\n    if (isLoading) return;\n    try {\n      setIsLoading(true);\n      showResetStatus('Running test reset...', 'info');\n\n      // Simulate test reset - in real implementation, this would call a test endpoint\n      setTimeout(() => {\n        showResetStatus('✅ Test reset completed successfully. No actual data was modified.', 'success');\n        setIsLoading(false);\n      }, 2000);\n    } catch (error) {\n      console.error('Test reset error:', error);\n      showResetStatus('❌ Test reset failed.', 'error');\n      setIsLoading(false);\n    }\n  };\n\n  // Toggle automatic reset schedule\n  const toggleAutomaticReset = async () => {\n    try {\n      setIsLoading(true);\n      const newStatus = !automaticResetEnabled;\n\n      // Here you would call an API to enable/disable the scheduler\n      // For now, we'll just update the local state\n      setAutomaticResetEnabled(newStatus);\n      showResetStatus(`✅ Automatic reset schedule ${newStatus ? 'enabled' : 'disabled'}`, 'success');\n    } catch (error) {\n      console.error('Error toggling automatic reset:', error);\n      showResetStatus('❌ Failed to toggle automatic reset schedule', 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"database-reset-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-database\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), \"Database Reset Management\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-clock warning-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"MealCurrent Database Reset Schedule:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), \" Student meal records are automatically cleared at the times shown below, allowing students to scan meals again for the next meal period.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-options-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `reset-option-card ${selectedResetType === 'automatic' ? 'selected' : ''}`,\n        onClick: () => setSelectedResetType('automatic'),\n        \"data-reset-type\": \"automatic\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-option-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-clock\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Automatic Reset Schedule\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-option-description\",\n          children: \"MealCurrent database automatically clears student records 30 minutes before each meal starts, based on meal window times from database.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-timing\",\n          children: \"Active - Next reset varies by meal schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `reset-option-card ${selectedResetType === 'manual' ? 'selected' : ''}`,\n        onClick: () => setSelectedResetType('manual'),\n        \"data-reset-type\": \"manual\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-option-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-hand-paper\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Manual Reset Control\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-option-description\",\n          children: \"Perform immediate database reset when needed for maintenance or emergency situations.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-timing\",\n          children: \"Available anytime - Admin controlled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"schedule-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-calendar-alt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), \"Automatic Reset Schedule (EAT)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"schedule-toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"toggle-switch\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: automaticResetEnabled,\n              onChange: toggleAutomaticReset,\n              disabled: isLoading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"toggle-slider\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"toggle-label\",\n            children: automaticResetEnabled ? 'Enabled' : 'Disabled'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"schedule-grid\",\n        children: dynamicResetSchedule.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `schedule-card ${!automaticResetEnabled ? 'disabled' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"schedule-time\",\n            children: item.time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"schedule-meal\",\n            children: item.meal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"schedule-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"meal-start\",\n              children: [\"Meal: \", item.startTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"schedule-badge\",\n              children: \"Database Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), !automaticResetEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"schedule-disabled-notice\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-info-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this), \"Automatic reset schedule is currently disabled. Enable it to automatically clear meal records.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"manual-reset-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manual-reset-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-exclamation-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Manual Database Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manual-reset-warning\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Warning:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), \" Manual reset will immediately clear all current meal attendance records. Students will be able to use their meals again after the reset.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-btn danger manual-reset-btn\",\n          onClick: () => setShowConfirmation(true),\n          disabled: isLoading,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-trash-alt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), \"Reset Database Now\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-btn secondary test-reset-btn\",\n          onClick: performTestReset,\n          disabled: isLoading,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-vial\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this), \"Test Reset\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), resetStatus.message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `reset-status ${resetStatus.type}`,\n        children: resetStatus.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), showConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-confirmation-modal\",\n      onClick: () => setShowConfirmation(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset-confirmation-content\",\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-confirmation-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-exclamation-triangle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Confirm Database Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-confirmation-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Warning:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 18\n            }, this), \" This action will permanently delete all current meal attendance records.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Students will be able to use their meals again after the reset.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This action cannot be undone. Are you sure you want to proceed?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-confirmation-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-btn secondary cancel-reset-btn\",\n            onClick: () => setShowConfirmation(false),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this), \"Cancel\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-btn danger confirm-reset-btn\",\n            onClick: performManualReset,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-trash-alt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this), \"Reset Database\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s(DatabaseResetComponent, \"kQxvkxOiBVElY7Nqst6wR2R3LtA=\");\n_c = DatabaseResetComponent;\nexport default DatabaseResetComponent;\nvar _c;\n$RefreshReg$(_c, \"DatabaseResetComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DatabaseResetComponent","fetchDashboardData","_s","isLoading","setIsLoading","selectedResetType","setSelectedResetType","showConfirmation","setShowConfirmation","resetStatus","setResetStatus","message","type","dynamicResetSchedule","setDynamicResetSchedule","automaticResetEnabled","setAutomaticResetEnabled","fetchMealWindows","response","fetch","credentials","data","json","success","mealWindows","calculateResetSchedule","error","console","time","meal","resetType","mealWindowsObj","log","schedule","Object","entries","filter","mealType","window","enabled","map","startTime","match","hours","minutes","split","Number","startDate","Date","setHours","resetDate","getTime","resetTime","getDate","getHours","toString","padStart","getMinutes","displayName","charAt","toUpperCase","slice","item","sort","a","b","localeCompare","showResetStatus","setTimeout","performManualReset","method","headers","performTestReset","toggleAutomaticReset","newStatus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","checked","onChange","disabled","index","e","stopPropagation","_c","$RefreshReg$"],"sources":["C:/Users/hp/OneDrive/Desktop/Intern/src/components/DatabaseResetComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst DatabaseResetComponent = ({ fetchDashboardData }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedResetType, setSelectedResetType] = useState('manual');\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [resetStatus, setResetStatus] = useState({ message: '', type: '' });\n\n  const [dynamicResetSchedule, setDynamicResetSchedule] = useState([]);\n  const [automaticResetEnabled, setAutomaticResetEnabled] = useState(true);\n\n  // Fetch meal windows and calculate reset schedule\n  useEffect(() => {\n    const fetchMealWindows = async () => {\n      try {\n        const response = await fetch('/api/meal-windows', {\n          credentials: 'include'\n        });\n        const data = await response.json();\n        \n        if (data.success && data.mealWindows) {\n          calculateResetSchedule(data.mealWindows);\n        }\n      } catch (error) {\n        console.error('Error fetching meal windows:', error);\n        // Fallback to default schedule if API fails\n        setDynamicResetSchedule([\n          { time: '05:45', meal: 'Late Night', resetType: 'Before' },\n          { time: '09:30', meal: 'Breakfast', resetType: 'Before' },\n          { time: '14:30', meal: 'Lunch', resetType: 'Before' },\n          { time: '20:30', meal: 'Dinner', resetType: 'Before' }\n        ]);\n      }\n    };\n    \n    fetchMealWindows();\n  }, []);\n\n  // Calculate reset times (30 minutes before each meal start)\n  const calculateResetSchedule = (mealWindowsObj) => {\n    console.log('Calculating reset schedule from database:', mealWindowsObj);\n    \n    const schedule = Object.entries(mealWindowsObj)\n      .filter(([mealType, window]) => window.enabled)\n      .map(([mealType, window]) => {\n        // Validate startTime format\n        if (!window.startTime || !window.startTime.match(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)) {\n          console.error(`Invalid startTime format for ${mealType}:`, window.startTime);\n          return null;\n        }\n\n        const [hours, minutes] = window.startTime.split(':').map(Number);\n        const startDate = new Date();\n        startDate.setHours(hours, minutes, 0, 0);\n        \n        // Subtract 30 minutes for reset time\n        const resetDate = new Date(startDate.getTime() - (30 * 60000));\n        \n        // Handle day rollover (if reset time goes to previous day)\n        let resetTime;\n        if (resetDate.getDate() !== startDate.getDate()) {\n          // Reset time is on previous day, show as 23:XX\n          resetTime = `${resetDate.getHours().toString().padStart(2, '0')}:${resetDate.getMinutes().toString().padStart(2, '0')}`;\n        } else {\n          resetTime = `${resetDate.getHours().toString().padStart(2, '0')}:${resetDate.getMinutes().toString().padStart(2, '0')}`;\n        }\n        \n        console.log(`${mealType}: Start ${window.startTime} → Reset ${resetTime}`);\n        \n        // Format meal type display name\n        let displayName = mealType;\n        if (mealType === 'lateNight') {\n          displayName = 'Late Night';\n        } else {\n          displayName = mealType.charAt(0).toUpperCase() + mealType.slice(1);\n        }\n        \n        return {\n          time: resetTime,\n          meal: displayName,\n          resetType: 'Before',\n          startTime: window.startTime,\n          mealType: mealType\n        };\n      })\n      .filter(item => item !== null) // Remove invalid entries\n      .sort((a, b) => a.time.localeCompare(b.time));\n    \n    console.log('Final schedule for all meal types:', schedule);\n    setDynamicResetSchedule(schedule);\n  };\n\n  // Show reset status message\n  const showResetStatus = (message, type) => {\n    setResetStatus({ message, type });\n    \n    // Auto-remove success/error messages after 5 seconds\n    if (type !== 'info') {\n      setTimeout(() => {\n        setResetStatus({ message: '', type: '' });\n      }, 5000);\n    }\n  };\n\n  // Perform manual reset\n  const performManualReset = async () => {\n    if (isLoading) return;\n    \n    try {\n      setIsLoading(true);\n      setShowConfirmation(false);\n      showResetStatus('Resetting meal database...', 'info');\n      \n      const response = await fetch('/api/dashboard/reset-meals', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include'\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        showResetStatus(\n          `✅ ${data.message} Reset completed at ${data.resetTime}`, \n          'success'\n        );\n        \n        // Refresh dashboard stats if available\n        if (fetchDashboardData) {\n          setTimeout(() => {\n            fetchDashboardData();\n          }, 1000);\n        }\n      } else {\n        showResetStatus(`❌ Reset failed: ${data.error}`, 'error');\n      }\n    } catch (error) {\n      console.error('Reset error:', error);\n      showResetStatus('❌ Network error. Please check if the backend server is running.', 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Perform test reset\n  const performTestReset = async () => {\n    if (isLoading) return;\n    \n    try {\n      setIsLoading(true);\n      showResetStatus('Running test reset...', 'info');\n      \n      // Simulate test reset - in real implementation, this would call a test endpoint\n      setTimeout(() => {\n        showResetStatus('✅ Test reset completed successfully. No actual data was modified.', 'success');\n        setIsLoading(false);\n      }, 2000);\n      \n    } catch (error) {\n      console.error('Test reset error:', error);\n      showResetStatus('❌ Test reset failed.', 'error');\n      setIsLoading(false);\n    }\n  };\n\n  // Toggle automatic reset schedule\n  const toggleAutomaticReset = async () => {\n    try {\n      setIsLoading(true);\n      const newStatus = !automaticResetEnabled;\n      \n      // Here you would call an API to enable/disable the scheduler\n      // For now, we'll just update the local state\n      setAutomaticResetEnabled(newStatus);\n      \n      showResetStatus(\n        `✅ Automatic reset schedule ${newStatus ? 'enabled' : 'disabled'}`,\n        'success'\n      );\n      \n    } catch (error) {\n      console.error('Error toggling automatic reset:', error);\n      showResetStatus('❌ Failed to toggle automatic reset schedule', 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"database-reset-section\">\n      <h2>\n        <i className=\"fas fa-database\"></i>\n        Database Reset Management\n      </h2>\n\n      <div className=\"reset-description\">\n        <i className=\"fas fa-clock warning-icon\"></i>\n        <strong>MealCurrent Database Reset Schedule:</strong> Student meal records are automatically cleared at the times shown below, \n        allowing students to scan meals again for the next meal period.\n      </div>\n\n      <div className=\"reset-options-grid\">\n        <div \n          className={`reset-option-card ${selectedResetType === 'automatic' ? 'selected' : ''}`}\n          onClick={() => setSelectedResetType('automatic')}\n          data-reset-type=\"automatic\"\n        >\n          <div className=\"reset-option-header\">\n            <i className=\"fas fa-clock\"></i>\n            <h3>Automatic Reset Schedule</h3>\n          </div>\n          <div className=\"reset-option-description\">\n            MealCurrent database automatically clears student records 30 minutes before each meal starts, based on meal window times from database.\n          </div>\n          <div className=\"reset-timing\">\n            Active - Next reset varies by meal schedule\n          </div>\n        </div>\n\n        <div \n          className={`reset-option-card ${selectedResetType === 'manual' ? 'selected' : ''}`}\n          onClick={() => setSelectedResetType('manual')}\n          data-reset-type=\"manual\"\n        >\n          <div className=\"reset-option-header\">\n            <i className=\"fas fa-hand-paper\"></i>\n            <h3>Manual Reset Control</h3>\n          </div>\n          <div className=\"reset-option-description\">\n            Perform immediate database reset when needed for maintenance or emergency situations.\n          </div>\n          <div className=\"reset-timing\">\n            Available anytime - Admin controlled\n          </div>\n        </div>\n      </div>\n\n      <div className=\"schedule-display\">\n        <div className=\"schedule-header\">\n          <h4>\n            <i className=\"fas fa-calendar-alt\"></i>\n            Automatic Reset Schedule (EAT)\n          </h4>\n          <div className=\"schedule-toggle\">\n            <label className=\"toggle-switch\">\n              <input\n                type=\"checkbox\"\n                checked={automaticResetEnabled}\n                onChange={toggleAutomaticReset}\n                disabled={isLoading}\n              />\n              <span className=\"toggle-slider\"></span>\n            </label>\n            <span className=\"toggle-label\">\n              {automaticResetEnabled ? 'Enabled' : 'Disabled'}\n            </span>\n          </div>\n        </div>\n        <div className=\"schedule-grid\">\n          {dynamicResetSchedule.map((item, index) => (\n            <div key={index} className={`schedule-card ${!automaticResetEnabled ? 'disabled' : ''}`}>\n              <div className=\"schedule-time\">{item.time}</div>\n              <div className=\"schedule-meal\">{item.meal}</div>\n              <div className=\"schedule-info\">\n                <div className=\"meal-start\">Meal: {item.startTime}</div>\n                <div className=\"schedule-badge\">Database Reset</div>\n              </div>\n            </div>\n          ))}\n        </div>\n        {!automaticResetEnabled && (\n          <div className=\"schedule-disabled-notice\">\n            <i className=\"fas fa-info-circle\"></i>\n            Automatic reset schedule is currently disabled. Enable it to automatically clear meal records.\n          </div>\n        )}\n      </div>\n\n      <div className=\"manual-reset-section\">\n        <div className=\"manual-reset-header\">\n          <i className=\"fas fa-exclamation-circle\"></i>\n          <h3>Manual Database Reset</h3>\n        </div>\n\n        <div className=\"manual-reset-warning\">\n          <strong>Warning:</strong> Manual reset will immediately clear all current meal attendance records. \n          Students will be able to use their meals again after the reset.\n        </div>\n\n        <div className=\"reset-controls\">\n          <button \n            className=\"reset-btn danger manual-reset-btn\"\n            onClick={() => setShowConfirmation(true)}\n            disabled={isLoading}\n          >\n            <i className=\"fas fa-trash-alt\"></i>\n            Reset Database Now\n          </button>\n\n          <button \n            className=\"reset-btn secondary test-reset-btn\"\n            onClick={performTestReset}\n            disabled={isLoading}\n          >\n            <i className=\"fas fa-vial\"></i>\n            Test Reset\n          </button>\n        </div>\n\n        {resetStatus.message && (\n          <div className={`reset-status ${resetStatus.type}`}>\n            {resetStatus.message}\n          </div>\n        )}\n      </div>\n\n      {/* Confirmation Modal */}\n      {showConfirmation && (\n        <div className=\"reset-confirmation-modal\" onClick={() => setShowConfirmation(false)}>\n          <div className=\"reset-confirmation-content\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"reset-confirmation-header\">\n              <i className=\"fas fa-exclamation-triangle\"></i>\n              <h3>Confirm Database Reset</h3>\n            </div>\n            <div className=\"reset-confirmation-message\">\n              <p><strong>Warning:</strong> This action will permanently delete all current meal attendance records.</p>\n              <p>Students will be able to use their meals again after the reset.</p>\n              <p>This action cannot be undone. Are you sure you want to proceed?</p>\n            </div>\n            <div className=\"reset-confirmation-actions\">\n              <button \n                className=\"reset-btn secondary cancel-reset-btn\"\n                onClick={() => setShowConfirmation(false)}\n              >\n                <i className=\"fas fa-times\"></i>\n                Cancel\n              </button>\n              <button \n                className=\"reset-btn danger confirm-reset-btn\"\n                onClick={performManualReset}\n              >\n                <i className=\"fas fa-trash-alt\"></i>\n                Reset Database\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DatabaseResetComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}