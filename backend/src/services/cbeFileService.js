const fs = require('fs').promises;
const path = require('path');
const XLSX = require('xlsx');

class CBEFileService {
  constructor() {
    this.uploadDir = path.join(__dirname, '../../uploads/bulk-payments');
    this.ensureUploadDir();
  }

  async ensureUploadDir() {
    try {
      await fs.mkdir(this.uploadDir, { recursive: true });
    } catch (error) {
      console.error('Error creating upload directory:', error);
    }
  }

  // Generate CBE-compatible Excel file for bulk payments
  async generatePaymentFile(paymentData, metadata) {
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `CBE_Bulk_Payment_${metadata.month}_${metadata.year}_${timestamp}.xlsx`;
      const filePath = path.join(this.uploadDir, filename);

      // Create CBE-standard format
      const worksheetData = [
        // Header row - CBE standard format
        [
          'Serial No',
          'Account Number',
          'Account Holder Name',
          'Amount',
          'Currency',
          'Reference Number',
          'Description',
          'Bank Code',
          'Branch Code'
        ],
        // Data rows
        ...paymentData.map((payment, index) => [
          index + 1,
          payment.accountNumber,
          payment.studentName,
          payment.amount,
          'ETB',
          payment.reference,
          payment.description,
          'CBE001', // CBE bank code
          '001' // Default branch code
        ])
      ];

      // Add summary sheet
      const summaryData = [
        ['CBE Bulk Payment Summary'],
        [''],
        ['Month/Year', `${metadata.month}/${metadata.year}`],
        ['Total Records', metadata.totalRecords],
        ['Total Amount', metadata.totalAmount],
        ['Currency', 'ETB'],
        ['Generated Date', new Date().toISOString()],
        ['Generated By', 'Salale University Meal System'],
        [''],
        ['Instructions:'],
        ['1. Upload this file to CBE Corporate Banking Portal'],
        ['2. Verify total amount matches your account balance'],
        ['3. Authorize the batch payment with your CBE credentials'],
        ['4. Monitor payment status through CBE portal'],
        [''],
        ['Contact: IT Support for any technical issues']
      ];

      // Create workbook
      const workbook = XLSX.utils.book_new();
      
      // Add payment data sheet
      const paymentSheet = XLSX.utils.aoa_to_sheet(worksheetData);
      
      // Set column widths for better readability
      paymentSheet['!cols'] = [
        { width: 10 }, // Serial No
        { width: 20 }, // Account Number
        { width: 30 }, // Account Holder Name
        { width: 15 }, // Amount
        { width: 10 }, // Currency
        { width: 25 }, // Reference Number
        { width: 40 }, // Description
        { width: 12 }, // Bank Code
        { width: 12 }  // Branch Code
      ];

      XLSX.utils.book_append_sheet(workbook, paymentSheet, 'Payment Data');

      // Add summary sheet
      const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
      summarySheet['!cols'] = [{ width: 25 }, { width: 30 }];
      XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');

      // Write file
      XLSX.writeFile(workbook, filePath);

      // Generate download URL (in production, use proper file serving)
      const downloadUrl = `/api/files/bulk-payments/${filename}`;

      return {
        filename,
        filePath,
        downloadUrl,
        size: (await fs.stat(filePath)).size,
        recordCount: paymentData.length
      };

    } catch (error) {
      console.error('Error generating CBE payment file:', error);
      throw new Error('Failed to generate payment file');
    }
  }

  // Validate CBE file format
  validatePaymentFile(filePath) {
    try {
      const workbook = XLSX.readFile(filePath);
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

      // Check required headers
      const requiredHeaders = [
        'Serial No', 'Account Number', 'Account Holder Name', 
        'Amount', 'Currency', 'Reference Number', 'Description'
      ];

      const headers = data[0] || [];
      const missingHeaders = requiredHeaders.filter(header => 
        !headers.includes(header)
      );

      if (missingHeaders.length > 0) {
        return {
          valid: false,
          error: `Missing required headers: ${missingHeaders.join(', ')}`
        };
      }

      // Validate data rows
      const dataRows = data.slice(1);
      for (let i = 0; i < dataRows.length; i++) {
        const row = dataRows[i];
        if (!row[1] || !row[2] || !row[3]) { // Account Number, Name, Amount
          return {
            valid: false,
            error: `Invalid data in row ${i + 2}: missing required fields`
          };
        }
      }

      return {
        valid: true,
        recordCount: dataRows.length,
        totalAmount: dataRows.reduce((sum, row) => sum + (parseFloat(row[3]) || 0), 0)
      };

    } catch (error) {
      return {
        valid: false,
        error: 'Failed to read or parse file'
      };
    }
  }

  // Clean up old files (run periodically)
  async cleanupOldFiles(daysOld = 30) {
    try {
      const files = await fs.readdir(this.uploadDir);
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysOld);

      for (const file of files) {
        const filePath = path.join(this.uploadDir, file);
        const stats = await fs.stat(filePath);
        
        if (stats.mtime < cutoffDate) {
          await fs.unlink(filePath);
          console.log(`Deleted old bulk payment file: ${file}`);
        }
      }
    } catch (error) {
      console.error('Error cleaning up old files:', error);
    }
  }
}

module.exports = new CBEFileService();
